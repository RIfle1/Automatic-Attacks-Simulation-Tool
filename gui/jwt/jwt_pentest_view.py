import os
from tkinter import Tk
from tkinter.filedialog import askopenfilename

import jwt
import requests
import datetime
from kivy.uix.gridlayout import GridLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.checkbox import CheckBox
from kivy.uix.scrollview import ScrollView
from kivy.uix.spinner import Spinner

from gui.global_variables import default_font_size, title_font_size


class JwtPentestView(GridLayout):
    def __init__(self, console_view, report_view, **kwargs):
        super(JwtPentestView, self).__init__(**kwargs)
        self.cols = 1
        self.spacing = 10
        self.padding = 10
        self.fields = {}
        self.console_view = console_view
        self.report_view = report_view
        self.file_path = None
        self.override_field = None
        self.successful_addresses = []

        self.add_widget(Label(text="JWT Secret", size_hint=(1, None), height=30, font_size=title_font_size))
        self.secret_input = TextInput(
            hint_text="Enter JWT Secret",
            text="d0c3b3424d008addb57ad74c492b124e4e34c03a8b5ee842cbf81f05511b6434",
            multiline=False,
            size_hint=(1, None),
            height=30,
            font_size=default_font_size
        )
        self.add_widget(self.secret_input)

        self.add_widget(Label(text="Protected Endpoint", size_hint=(1, None), height=30, font_size=title_font_size))
        self.endpoint_input = TextInput(
            hint_text="Enter the protected endpoint URL",
            text="http://localhost:8080/user/me",
            multiline=False,
            size_hint=(1, None),
            height=30,
            font_size=default_font_size
        )
        self.add_widget(self.endpoint_input)

        self.add_widget(Label(text="Override Field with File", size_hint=(1, None), height=30, font_size=title_font_size))
        self.override_spinner = Spinner(
            text="Select Field",
            values=[],
            size_hint=(1, None),
            height=30,
            font_size=default_font_size
        )
        self.override_spinner.bind(text=self.set_override_field)
        self.add_widget(self.override_spinner)

        self.file_button = Button(text="Select File", size_hint=(1, None), height=40, font_size=default_font_size)
        self.file_button.bind(on_press=self.open_file_selector)
        self.add_widget(self.file_button)

        self.file_path_display = TextInput(
            text="No file selected",
            readonly=True,
            multiline=False,
            size_hint=(1, None),
            height=30,
            font_size=default_font_size
        )
        self.add_widget(self.file_path_display)

        self.fields_layout = GridLayout(cols=1, size_hint_y=None)
        self.fields_layout.bind(minimum_height=self.fields_layout.setter('height'))
        self.scroll_view = ScrollView(size_hint=(1, None), height=300)
        self.scroll_view.add_widget(self.fields_layout)
        self.add_widget(self.scroll_view)

        self.add_field("sub", "test@example.com")
        self.add_field("exp", "100000")
        self.add_field("roles", "ROLE_ADMIN", is_list=True)

        self.start_button = Button(text="Start Pentest", size_hint=(1, None), height=50, font_size=default_font_size)
        self.start_button.bind(on_press=self.start_pentest)
        self.add_widget(self.start_button)

    def set_override_field(self, instance, value):
        if value != "Select Field":
            self.override_field = value

    def add_field(self, field_name, default_value="", is_list=False):
        layout = GridLayout(cols=3, size_hint_y=None, height=40)
        checkbox = CheckBox(active=True, size_hint=(None, None), size=(30, 30))
        value_input = TextInput(
            hint_text=f"Enter value for {field_name}",
            text=default_value,
            multiline=False,
            size_hint=(0.7, None),
            height=30,
            font_size=default_font_size
        )
        list_checkbox = CheckBox(active=is_list, size_hint=(None, None), size=(30, 30))
        layout.add_widget(checkbox)
        layout.add_widget(value_input)
        layout.add_widget(list_checkbox)
        self.fields[field_name] = {
            "layout": layout,
            "checkbox": checkbox,
            "value_input": value_input,
            "list_checkbox": list_checkbox
        }
        self.fields_layout.add_widget(layout)
        self.override_spinner.values = list(self.fields.keys())

    def open_file_selector(self, _):
        root = Tk()
        root.withdraw()
        selected_file = askopenfilename(
            title="Select File",
            filetypes=[("Text Files", "*.txt")],
            initialdir=os.path.abspath(os.path.join(os.path.dirname(__file__), "../..", "Resources"))
        )
        if selected_file:
            self.file_path = selected_file
            self.file_path_display.text = self.file_path
        else:
            self.file_path_display.text = "No file selected"

    def start_pentest(self, _):
        secret = self.secret_input.text.strip()
        endpoint = self.endpoint_input.text.strip()
        if not self.override_field or not self.file_path:
            self.console_view.add_text_schedule("Please select a field and a file for override.")
            return
        try:
            with open(self.file_path, "r") as file:
                values = [line.strip() for line in file if line.strip()]
        except Exception as e:
            self.console_view.add_text_schedule(f"Error reading file: {e}")
            return
        for value in values:
            payload = {}
            for field_name, field in self.fields.items():
                if field["checkbox"].active:
                    if field_name == "exp":
                        try:
                            seconds_to_add = int(field["value_input"].text.strip())
                            exp_time = int(
                                (datetime.datetime.now() + datetime.timedelta(seconds=seconds_to_add)).timestamp())
                            payload[field_name] = exp_time
                        except ValueError:
                            self.console_view.add_text_schedule("Invalid expiration time. Please enter a valid number.")
                            return
                    elif field_name == self.override_field:
                        payload[field_name] = value
                    elif field["list_checkbox"].active:
                        payload[field_name] = [item.strip() for item in field["value_input"].text.split(",") if
                                               item.strip()]
                    else:
                        payload[field_name] = field["value_input"].text.strip()
            self.send_request(endpoint, secret, payload)
        self.report_view.add_text_schedule("\n[SUMMARY] Successful addresses:")
        for address in self.successful_addresses:
            self.report_view.add_text_schedule(address)

    def send_request(self, endpoint, secret, payload):
        try:
            token = jwt.encode(payload, secret, algorithm="HS256")
            headers = {"Authorization": f"Bearer {token}"}
            response = requests.get(endpoint, headers=headers)
            if response.status_code == 200:
                self.successful_addresses.append(payload[self.override_field])
                self.console_view.add_text_schedule(f"[SUCCESS] {payload}: {response.text}")
            else:
                self.console_view.add_text_schedule(f"[FAILED] {payload}: {response.status_code}")
        except Exception as e:
            self.console_view.add_text_schedule(f"[ERROR] {payload}: {e}")